name: Mise à jour ATIS

on:
  schedule:
    - cron: "22,52 * * * *"   # À 22 et 52 minutes de chaque heure
  workflow_dispatch:

jobs:
  update-atis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configurer Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Configurer le cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Whisper models
        uses: actions/cache@v3
        with:
          path: ~/.cache/whisper
          key: whisper-models-${{ runner.os }}

      - name: Installer Whisper
        run: |
          pip install git+https://github.com/openai/whisper.git

      - name: Enregistrer le flux ATIS avec curl et ffmpeg
        run: |
          sudo apt update
          sudo apt install -y ffmpeg curl
          curl -s -A "Mozilla/5.0" -e "https://www.liveatc.net/" "https://s1-fmt2.liveatc.net/eetn2_atis" | \
          ffmpeg -i pipe:0 -t 60 -y atis_tallinn.mp3

      - name: Transcrire avec Whisper (modèle medium)
        run: |
          whisper atis_tallinn.mp3 --model medium --language en --output_format txt --output_dir .

      - name: Nettoyer transcription ATIS
        run: |
          cat > atis_formatter.py << 'EOF'
import re
import sys
from pathlib import Path

def normalize_atis(text: str) -> str:
    nato = {
        "alva": "Alpha", "alpha": "Alpha", "bravo": "Bravo", "charlie": "Charlie",
        "delta": "Delta", "echo": "Echo", "foxtrot": "Foxtrot", "golf": "Golf",
        "hotel": "Hotel", "india": "India", "juliett": "Juliet", "kilo": "Kilo",
        "lima": "Lima", "mike": "Mike", "november": "November", "oscar": "Oscar",
        "papa": "Papa", "quebec": "Quebec", "romeo": "Romeo", "sierra": "Sierra",
        "tango": "Tango", "uniform": "Uniform", "victor": "Victor",
        "whiskey": "Whiskey", "x-ray": "X-ray", "yankee": "Yankee", "zulu": "Zulu"
    }
    for k,v in nato.items():
        text = re.sub(rf"\b{k}\b", v, text, flags=re.IGNORECASE)

    numbers = {
        "zero": "0", "one": "1", "two": "2", "three": "3", "four": "4",
        "five": "5", "six": "6", "seven": "7", "eight": "8", "nine": "9"
    }
    for k,v in numbers.items():
        text = re.sub(rf"\b{k}\b", v, text, flags=re.IGNORECASE)

    text = re.sub(r"QNH\s*([0-9 ]{3,5})", lambda m: f"QNH {m.group(1).replace(' ', '')} hPa", text, flags=re.IGNORECASE)
    text = re.sub(r"([0-9]{2,3})\s*degrees?\s*([0-9]{1,2})\s*knots?", r"Wind: \1° / \2 kt", text, flags=re.IGNORECASE)
    text = re.sub(r"temperature\s*([\-0-9]{1,3})", r"Temperature: \1°C", text, flags=re.IGNORECASE)
    text = re.sub(r"dew point\s*([\-0-9]{1,3})", r"Dew point: \1°C", text, flags=re.IGNORECASE)
    text = re.sub(r"visibility\s*([0-9]+)\s*kilo?met(er|re)?s?", r"Visibility: \1 km", text, flags=re.IGNORECASE)
    text = re.sub(r"transition level\s*([0-9]+)", r"Transition Level: \1", text, flags=re.IGNORECASE)
    text = re.sub(r"runway in use\s*([0-9]{2})", r"Runway in use: \1", text, flags=re.IGNORECASE)
    text = re.sub(r"ATIS information\s*([A-Z])", r"ATIS Information \1:", text, flags=re.IGNORECASE)
    return text.strip()

def main():
    infile = Path("atis_tallinn.txt")
    if not infile.exists():
        print("Erreur : fichier atis_tallinn.txt introuvable", file=sys.stderr)
        sys.exit(1)
    raw = infile.read_text(encoding="utf-8")
    cleaned = normalize_atis(raw)
    infile.write_text(cleaned, encoding="utf-8")
    print("ATIS formaté :\n")
    print(cleaned)

if __name__ == "__main__":
    main()
EOF
          python atis_formatter.py

      - name: Injecter dans index.html
        run: |
          if [ -f atis_tallinn.txt ]; then
            transcription=$(cat atis_tallinn.txt | tr '\n' ' ' | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/"/\&quot;/g' -e "s/'/\&#39;/g")
            sed -i '/<div id="atis-message">/,/<\/div>/c\<div id="atis-message">\n        <p>'"$transcription"'</p>\n      </div>' index.html
            echo "Contenu mis à jour dans index.html :"
            grep -A3 "<div id=\"atis-message\">" index.html
          else
            echo "Erreur : atis_tallinn.txt manquant" >&2
            exit 1
          fi

      - name: Commit et Push
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add index.html
          if git diff-index --quiet HEAD; then
            echo "Aucun changement dans index.html."
          else
            git pull --rebase origin main
            timestamp=$(date +"%Y-%m-%d %H:%M:%S")
            git commit -m "Mise à jour ATIS Tallinn : $timestamp"
            git push
