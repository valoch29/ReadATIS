name: Mise à jour automatique de l'ATIS
on:
  schedule:
    - cron: '22,52 * * * *'  # Exécution toutes les heures à 22 et 52 minutes
  workflow_dispatch:         # Permet un déclenchement manuel

jobs:
  update-atis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ATIS_TOKEN }}

      - name: Créer un fichier .gitignore
        run: |
          echo "atis_tallinn.mp3" >> .gitignore
          echo "atis_tallinn.txt" >> .gitignore

      - name: Installer les dépendances système
        run: |
          sudo apt update
          sudo apt install -y ffmpeg curl python3-pip

      - name: Configurer le cache Python
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Installer Whisper
        run: |
          pip install git+https://github.com/openai/whisper.git

      - name: Enregistrer le flux ATIS avec curl et ffmpeg
        run: |
          curl -s -A "Mozilla/5.0" -e "https://www.liveatc.net/" "https://s1-fmt2.liveatc.net/eetn2_atis" | \
          ffmpeg -i pipe:0 -t 60 -y atis_tallinn.mp3

      - name: Transcrire avec Whisper (modèle medium)
        run: |
          whisper atis_tallinn.mp3 --model medium --language English --output_format txt --output_dir .

      - name: Créer script Python pour format ATIS
        run: |
          cat > atis_formatter.py << 'EOF'
          import re
          import sys
          from pathlib import Path

          def normalize_atis(text: str) -> str:
              nato = {
                  "alfa":"Alpha","alpha":"Alpha","bravo":"Bravo","charlie":"Charlie",
                  "delta":"Delta","echo":"Echo","foxtrot":"Foxtrot","golf":"Golf",
                  "hotel":"Hotel","india":"India","juliett":"Juliet","kilo":"Kilo",
                  "lima":"Lima","mike":"Mike","november":"November","oscar":"Oscar",
                  "papa":"Papa","quebec":"Quebec","romeo":"Romeo","sierra":"Sierra",
                  "tango":"Tango","uniform":"Uniform","victor":"Victor",
                  "whiskey":"Whiskey","x-ray":"X-ray","yankee":"Yankee","zulu":"Zulu"
              }
              for k,v in nato.items():
                  text = re.sub(rf"\b{k}\b", v, text, flags=re.IGNORECASE)

              numbers = {
                  "zero":"0","one":"1","two":"2","three":"3","four":"4",
                  "five":"5","six":"6","seven":"7","eight":"8","nine":"9"
              }
              for k,v in numbers.items():
                  text = re.sub(rf"\b{k}\b", v, text, flags=re.IGNORECASE)

              text = re.sub(r"QNH\s*([0-9 ]{3,5})", lambda m: f"QNH {m.group(1).replace(' ', '')} hPa", text, flags=re.IGNORECASE)
              text = re.sub(r"([0-9]{2,3})\s*degrees?\s*([0-9]{1,2})\s*knots?", r"Wind: \1° / \2 kt", text, flags=re.IGNORECASE)
              text = re.sub(r"temperature\s*([\-0-9]{1,3})", r"Temperature: \1°C", text, flags=re.IGNORECASE)
              text = re.sub(r"dew point\s*([\-0-9]{1,3})", r"Dew point: \1°C", text, flags=re.IGNORECASE)
              text = re.sub(r"visibility\s*([0-9]+)\s*kilo?met(er|re)?s?", r"Visibility: \1 km", text, flags=re.IGNORECASE)
              text = re.sub(r"transition level\s*([0-9]+)", r"Transition Level: \1", text, flags=re.IGNORECASE)
              text = re.sub(r"runway in use\s*([0-9]{2})", r"Runway in use: \1", text, flags=re.IGNORECASE)
              text = re.sub(r"ATIS information\s*([A-Z])", r"ATIS Information \1:", text, flags=re.IGNORECASE)
              return text.strip()

          def main():
              infile = Path("atis_tallinn.txt")
              if not infile.exists():
                  print("Erreur : fichier atis_tallinn.txt introuvable", file=sys.stderr)
                  sys.exit(1)
              raw = infile.read_text(encoding="utf-8")
              cleaned = normalize_atis(raw)
              infile.write_text(cleaned, encoding="utf-8")
              print("ATIS formaté :\n")
              print(cleaned)

          if __name__ == "__main__":
              main()
          EOF

      - name: Formater transcription ATIS
        run: python atis_formatter.py

      - name: Mettre à jour index.html avec la transcription
        run: |
          if [ -f atis_tallinn.txt ]; then
            transcription=$(tr '\n' ' ' < atis_tallinn.txt | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/"/\&quot;/g' -e "s/'/\&#39;/g")
            tmpfile=$(mktemp)
            awk -v trans="$transcription" '
            BEGIN { in_div=0 }
            {
              if ($0 ~ /<div id="atis-message">/) {
                print $0
                print "        <p>" trans "</p>"
                in_div=1
              } else if ($0 ~ /<\/div>/ && in_div) {
                print $0
                in_div=0
              } else if (!in_div) {
                print $0
              }
            }' index.html > "$tmpfile"
            mv "$tmpfile" index.html
            echo "Contenu mis à jour dans index.html :"
            grep -A3 "<div id=\"atis-message\">" index.html
          else
            echo "Erreur : atis_tallinn.txt manquant" >&2
            exit 1
          fi

      - name: Valider et pousser les modifications
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add index.html
          if git diff-index --quiet HEAD; then
            echo "Aucun changement détecté dans index.html."
          else
            timestamp=$(date +"%Y-%m-%d %H:%M:%S")
            git commit -m "Mise à jour ATIS Tallinn : $timestamp"
            git push https://valoch29:${{ secrets.ATIS_TOKEN }}@github.com/valoch29/ReadATIS.git HEAD:main
          fi
