name: Mise à jour automatique de l'ATIS
on:
  schedule:
    - cron: '22,52 * * * *'  # Exécution toutes les heures à 22 et 52 minutes
  workflow_dispatch:         # Permet un déclenchement manuel

jobs:
  update-atis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ATIS_TOKEN }}

      - name: Créer un fichier .gitignore
        run: |
          echo "atis_tallinn.mp3" >> .gitignore
          echo "atis_tallinn.txt" >> .gitignore
      - name: Installer les dépendances système
        run: |
          sudo apt update
          sudo apt install -y ffmpeg curl
      - name: Configurer le cache Python
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Installer Whisper
        run: |
          pip install git+https://github.com/openai/whisper.git
      - name: Enregistrer le flux ATIS avec curl et ffmpeg
        run: |
          curl -s -A "Mozilla/5.0" -e "https://www.liveatc.net/" "https://s1-fmt2.liveatc.net/eetn2_atis" | \
          ffmpeg -i pipe:0 -t 60 -y atis_tallinn.mp3
      - name: Transcrire avec Whisper (modèle base)
        run: |
          whisper atis_tallinn.mp3 --model base --language English --output_format txt --output_dir .
          # Post-traitement pour standardiser les termes ATIS
          sed -i -e 's/ degrees/°/g' \
                 -e 's/ kilo[^ ]* meters/km/g' \
                 -e 's/ Celsius/°C/g' \
                 -e 's/ transition level/Transition Level/g' \
                 -e 's/ QNH \([0-9]\{4\}\)/QNH \1 hPa/g' \
                 -e 's/\([0-9]\) \([0-9]\)/\1\2/g' \
                 -e 's/\([0-9]\),\([0-9]\)/\1\2/g' \
                 -e 's/\([0-9]\)\([0-9]\)\([0-9]\)°/\1\2\3°/g' \
                 -e 's/ATIS information \([A-Z]\)/ATIS information \1:/g' \
                 atis_tallinn.txt
          echo "Transcription finale :"
          cat atis_tallinn.txt
      - name: Mettre à jour index.html avec la transcription
        run: |
          if [ -f atis_tallinn.txt ]; then
            transcription=$(cat atis_tallinn.txt | tr '\n' ' ' | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/"/\&quot;/g' -e "s/'/\&#39;/g")
            cp index.html index.html.bak
            awk -v trans="$transcription" '
            BEGIN { in_div = 0 }
            {
              if ($0 ~ /<div id="atis-message">/) {
                print $0
                print "        <p>" trans "</p>"
                in_div = 1
              }
              else if ($0 ~ /<\/div>/ && in_div) {
                print $0
                in_div = 0
              }
              else if (!in_div) {
                print $0
              }
            }' index.html.bak > index.html
            echo "Contenu mis à jour dans index.html :"
            grep -A5 "<div id=\"atis-message\">" index.html
          else
            echo "Erreur : le fichier atis_tallinn.txt est manquant." >&2
            exit 1
          fi
      - name: Valider et pousser les modifications
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add index.html
          if git diff-index --quiet HEAD; then
            echo "Aucun changement détecté dans index.html."
          else
            timestamp=$(date +"%Y-%m-%d %H:%M:%S")
            git commit -m "Mise à jour ATIS Tallinn : $timestamp"
            git push --force https://valoch29:${{ secrets.ATIS_TOKEN }}@github.com/valoch29/ReadATIS.git HEAD:main
          fi
